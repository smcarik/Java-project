import java.io.*;
import java.util.*;

/**
 * This class instantiates the .dat files and then initializes all of the information
 */

public class SRSDataAccess
{
  static File scheduleFileName = new File("SoC_SP2005.dat");
  static File facultyFileName = new File("Faculty.dat");
  static File assignmentsFileName = new File("TeachingAssignments.dat");
  static File courseFileName = new File("CourseCatalog.dat");
  static File prereqFileName = new File("Prerequisites.dat");
  static Scanner facultyScan, scheduleScan, assignmentsScan, courseScan, prereqScan, studentScan;
  static ScheduleOfClasses classes;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  /*
   * reads data in from schedule file and populates schedule map!
   * @param semester 
   * @return classes the schedule of classes available
   */
  public static ScheduleOfClasses initializeScheduleOfClasses(String semester)
  {
    Section section;
    classes = new ScheduleOfClasses();
    try{
      Scanner scheduleScan = new Scanner(scheduleFileName);
      
      
      classes.setSemester(semester);
      while (scheduleScan.hasNextLine())
      {
        String line = scheduleScan.nextLine();
     
        String[] array = line.split("\t");

        section = new Section(Integer.parseInt(array[1]), array[2], array[3], array[4], Integer.parseInt(array[5]));
        section.setRepresentedCourse(array[0]);
        
        classes.addSection(array[0] + " - " + array[1], section);
      }
      scheduleScan.close();
    }
    catch(FileNotFoundException exc)
    {
      exc.printStackTrace();
    }
    return classes;
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  /**
   * This method reads data in from course catalog file
   * @return cat
   */
  public static CourseCatalog initializeCourseCatalog()
  {
    Course course;
    CourseCatalog cat = new CourseCatalog();
    try{
      Scanner courseScan = new Scanner(courseFileName);
      Scanner prereqScan = new Scanner(prereqFileName);
      
      
      
      while (courseScan.hasNextLine())
      {
        String line = courseScan.nextLine();
        
        String[] array = line.split("\t");
        
        course = new Course(array[0], array[1], Double.parseDouble(array[2]));
        cat.addCourse(course);
      }
      
      while(prereqScan.hasNextLine())
      {
        String line2 = prereqScan.nextLine();
        String[] array1 = line2.split("\t");
        String courseNo = array1[1];
        String prereqNo = array1[0];
        Course c = cat.findCourse(courseNo);
      
        Course p = cat.findCourse(prereqNo);
        if(!p.equals(null) && !c.equals(null))
        {
          c.addPrerequisite(p);
        }
        
      }
      
      prereqScan.close();
      courseScan.close();
      
    }
    
    catch(FileNotFoundException exc)
    {
      System.out.println("courseCatalog couldnt be initialized");
      exc.printStackTrace();
    }
    
    return cat;
  }
  
  
  
  
  
  /*
   * reads in data from faculty file and populates the faculty map
   * @return faculty
   */
  public static Faculty initializeFaculty()
  {
    Professor prof;
    Faculty faculty = new Faculty();
    try{
      Scanner assignmentsScan = new Scanner(assignmentsFileName);
      Scanner facultyScan = new Scanner(facultyFileName);
      
      
      while (facultyScan.hasNextLine())
      {
        String line = facultyScan.nextLine();
        
        String[] array1 = line.split("\t");
        
        
        // new prof obj created with, name, ssn, title, dept
        prof = new Professor(array1[0],array1[1], array1[2], array1[3]);
       
        //adds prof to professors map in faculty class
        faculty.addProfessor(prof);
        
      }
      while(assignmentsScan.hasNextLine())
      {
        String line1 = assignmentsScan.nextLine();
        String[] array2 = line1.split("\t");
    
        Professor p = faculty.findProfessor(array2[0]);
        String fullSecNo = array2[1];
        
        Section sex = classes.findSection(fullSecNo);
       
        p.agreeToTeach(sex);
      }
      assignmentsScan.close();
      facultyScan.close();
    }
    catch(FileNotFoundException exc)
    {
      exc.printStackTrace();
    }
    
    return faculty;
  }
  
  
  
  
  /**
   * reads in data from a student file and populates the student map
   * @param ssn
   * @return student
   */
  public static Student initializeStudent(String ssn)
  {
    
    Section section;
    Student student = new Student();
    try
    {
      Scanner studentScan = new Scanner(new File(ssn + ".dat"));
      String line = studentScan.nextLine();
      String array[] = line.split("\t");
      
      student.setSsn(array[0]);
      student.setName(array[1]);
      student.setMajor(array[2]);
      student.setDegree(array[3]);
    
      
      
      while(studentScan.hasNextLine()){
        String line2 = studentScan.nextLine();
        String[] array1 =  line2.split("\t");
        for (int i = 0; i < array1.length; i++)
        {
       System.out.println(array1[i]);
       section = classes.findSection(array1[i]);
       section.display();
       if(section.confirmSeatAvailibility())
         
         section.enroll(student);
       student.addSection(section);
       student.getEnrolledSections();
       
        }
      }
      
      studentScan.close();
    }
    catch(FileNotFoundException exc)
    {
      exc.printStackTrace(); 
    }
    System.out.println(student.toString());
    return student;
  }
  
  /*
   * Saves student to its own ssn.dat file.
   * 
   * @param student Student to be saved to it's ssn.dat file.
   */
  public static void persistStudent(Student student) 
    throws FileNotFoundException{
    
    PrintWriter studentFile = new PrintWriter(student.getSsn() + ".dat");
    studentFile.println(student.getSsn() + "\t" + student.getName() + "\t" + student.getMajor() + "\t" + student.getDegree());
    studentFile.print(student.getEnrolledSections());
    studentFile.close();
  }
}
