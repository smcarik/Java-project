import java.util.*;
/**
 * class ScheduleOfClasses
 * sets and returns semester of class schedule as well as finding or adding a section to the class schedule
 */
public class ScheduleOfClasses extends Section
{
  /**
   * declared variables
   */
  private String semester;
  private HashMap<String, Section> sectionsOffered;
  public ScheduleOfClasses()
  {
    sectionsOffered = new HashMap<String, Section>();
  }
  /**
   * sets the semester of a class schedule
   * @param semester
   */
  public void setSemester(String semester)
  {
    this.semester = semester;
  }
  /**
   * gets the semester of a class schedule
   * @return semester
   */
  public String getSemester()
  {
    return semester;
  }
  /**
   * returns the sections offered of a course
   * @return sectionsOffered
   */
  public ArrayList<Section> getSectionsOffered()
  {
    ArrayList<Section> result = new ArrayList<Section>();
    for(String s : sectionsOffered.keySet())
    {
      result.add(sectionsOffered.get(s));
    }
    return result;
  }
  /**
   * displays the full section number of all classes in the sectionsOffered array
   */
  public void display()
  {
    for(Section key:sectionsOffered.values())
    {
     key.display();
     System.out.println();
    }
  }
  /**
   * adds a course section to the sectionsOffered array which contains all sections and courses
   */
  public void addSection(String fullSection, Section section)
  {
    sectionsOffered.put(fullSection, section);
  }
  /**
   * finds the section of a certain course
   * @param fullSection this is the full section number
   */
  public Section findSection(String fullSection)
  {
    Section s = null;
    if(sectionsOffered.containsKey(fullSection))
      s = sectionsOffered.get(fullSection);
    return s;
  }
  /**
   * this method checks to see if the class schedule is empty or not
   */
  public boolean isEmpty()
  {
    if(sectionsOffered.isEmpty()==true)
    {
     return true; 
    }
    else
    {
     return false; 
    }
  }
}
