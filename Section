import java.util.*;
/**
 * this is a class that creates sections
 **/
public class Section
{
  /**
   * declared variables used within this class
   **/
  private String sectionNo, dayOfWeek, timeOfDay, room;
  private int seatingCapacity;
  private Professor instructor;
  private Course representedCourse;
  private ScheduleOfClasses offeredIn;
  private HashMap<String, Student> enrolledStudents;
  private HashMap<Student, TranscriptEntry> assignedGrades;
  /**
   * sets the number that represents the section
   *@param sectionNo is the number assigned to the section
   **/
  public Section(String secNo, String dayOfWeek, String timeOfDay, String roomNum, int cap, Professor instructor,
                 Course courseNo, ScheduleOfClasses offeredIn)
  {
    sectionNo=secNo;
    dayOfWeek=dayOfWeek;
    timeOfDay=timeOfDay;
    room=roomNum;
    seatingCapacity=cap;
    instructor=instructor;
    representedCourse=courseNo;
    offeredIn=offeredIn;
    enrolledStudents = new HashMap<String, Student>();
    assignedGrades = new HashMap<Student, TranscriptEntry>();
    
  }
  public void setSectionNo(String sectionNo)
  {
    this.sectionNo = sectionNo;
  }
  /**
   * returns the sectionNo
   * @return sectionNo 
   **/
  public String getSectionNo()
  {
    return sectionNo;
  }
  /**
   * sets the days of the week the class will be held
   * @param day  the day the class will be held
   **/
  public void setDayOfWeek(String day)
  {
    this.dayOfWeek = day;
  }
  /**
   * gets the days of the week the class is held
   * @return dayOfWeek returns the day of the week the class will be held
   **/
  public String getDayOfWeek()
  {
    return dayOfWeek;
  }
  /**
   * sets the time of day the class will be held
   * @param time the time of the class on days held
   **/
  public void setTimeOfDay(String time)
  {
    this.timeOfDay = time;
  }
  /**
   * gets the time of day the class will be held
   * @return timeOfDay  returns the time of day the class is held
   **/
  public String getTimeOfDay()
  {
    return timeOfDay;
  }
  /**
   * sets the instructor of the class
   * @param professor the professor teaching the sections
   **/
  public void setInstructor(Professor professor)
  {
    this.instructor = professor;
  }
  /**
   * gets the name of the instructor teaching the section
   * @return instructor returns the instructor teaching
   **/
  public Professor getInstructor()
  {
    return instructor;
  }
  /**
   * sets the course that the section is representing
   * @param course the course the section represents
   **/
  public void setRepresentedCourse(Course course)
  {
    this.representedCourse = course;
  }
  /**
   * gets the course represented by the section
   * @return representedCourse returns the course represented
   **/
  public Course getRepresentedCourse()
  {
    return representedCourse;
  }
  /**
   * sets the room the sections will be held in
   * @param room the room number the room is held in
   **/
  public void setRoom(String room)
  {
    this.room = room;
  }
  /**
   * gets the room number the class is held in
   * @return room the number the class is held in
   **/
  public String getRoom()
  {
    return room;
  }
  /**
   * sets the number of students allowed in the class
   * @param capacity number of students
   **/
  public void setSeatingCapacity(int capacity)
  {
    this.seatingCapacity = capacity;
  }
  /**
   * gets the number of seats available in the class
   * @return seatingCapacity returns number of students allowed in the class
   **/
  public int getSeatingCapacity()
  {
    return seatingCapacity;
  }
  /**
   * sets what schedule of classes the course is offered in
   * @param scheduleOfClasses the schedule of the class
   **/
  public void setOfferedIn(ScheduleOfClasses scheduleOfClasses)
  {
    this.offeredIn = scheduleOfClasses;
  }
  /**
   * gets what schedule the class is offered in
   * @return offeredIn returns what its offered in
   **/
  public ScheduleOfClasses getOfferedIn()
  {
    return offeredIn;
  }
  /**
   * turns the information into a string
   * @return returns what the string will be
   **/
  public String toString()
  {
    return sectionNo+dayOfWeek+timeOfDay+room+seatingCapacity+instructor+representedCourse+offeredIn;
  }
  /**
   * gets the section number and course number
   * @return returns a string with the course number and the section number
   **/
  public String getFullSectionNo()
  {
    return representedCourse.getCourseNo() + "-" + sectionNo;
  }
  /**
   * adds student to list of enrolled students
   * @param student name of student
   **/
  public void enroll(Student student)
  {
    //code  uses enrollment status,  finish when enrollment status enum class finished.
  }
  /**
   * checks if there are seats available
   * @return returns if there are seats available
   **/
  public Boolean confirmSeatAvailibility()
  {
    /*create enrolledStudents map
     * find size of map
     * Then if size of map is less then seatingCapacity
     * return there are seats are available
     * else return that there are no seats available
     */
    if(enrolledStudents.size()<=seatingCapacity)
    {
     return true; 
    }
    else
    {
    return false;
    }
  }
  /**
   * gets number of enrolled students
   * @return number of enrolled students
   **/
  public int getTotalEnrollment()
  {
    return enrolledStudents.size();
  }
  /**
   * displays the information
   * @return
   **/
  public void display()
  {
    //displays the information to GUI
    //for now print to system
    System.out.println(enrolledStudents);
    System.out.println(assignedGrades);
    //also print information acquired from toString method
  }
  /**
   * displays the roster of students
   * @return roster
   **/
  public void displayStudentRoster()
  {
    for(String ssn : enrolledStudents.keySet())
    {
     System.out.println(enrolledStudents.get(ssn)); 
    }
  }
  /**
   * gets the grade
   * @return students grade
   **/
  public String getGrade()
  {
    //run through the assignedGrades and find the student, and return their grade
    
    /*for(Student key : assignedGrades.keySet())
    {
     if(key.equals(Student.getName))
     {
      return assignedGrades.get(key); 
     }
     else
       return "That person does not have a grade";
    }
    */
    return null;
  }
  /**
   * puts students grade in the map
   * @param student student
   * @param grade students grade
   **/
  public void postGrade(Student student, String grade)
  {
    //after we create the map then we can finish this one
    
    // I dont know how to add the grade to the map, given that the value type is TranscriptEntry
  }
  /**
   * checks what course this is a section of
   * @param course name of course
   **/
  public Boolean isSectionOf(Course course)
  {
    if(course.offeredAsSection.contains(sectionNo))
    {
     return true; 
    }
    else
    {
    return false;
    }
  }
}
