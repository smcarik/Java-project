/**
 * This class builds a frame with a menu and drop down options to display all the information.
 */
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
import java.nio.*;
import java.io.*;

public class MainFrame extends JFrame
{
  private JDesktopPane theDesktop;
  private JInternalFrame loginFrame, loggedOff, findStudentFrame;
  private String userSsn;
  private JButton searchButton, close;
  private JTextArea nameResult, ssn2Result, majorResult, degreeResult;
  private JTextField ssnText;
  public MainFrame() 
  {
    super( "Main Frame" );
    JMenuBar bar = new JMenuBar(); // create menu bar
    
    JMenu file = new JMenu( "File" );// create Add menu
    JMenuItem login = new JMenuItem( "Login" );
    JMenuItem logoff = new JMenuItem( "Logoff Bitch" );
    JMenuItem close = new JMenuItem( "Close" );
    
    JMenu student = new JMenu("Student");
    JMenuItem findStudent = new JMenuItem("Find Student");
    JMenuItem studentSchedule = new JMenuItem("Display Course Schedule");
    JMenuItem addSection = new JMenuItem("Add Section");
    JMenuItem dropSection = new JMenuItem("Drop Section");
    JMenuItem viewTranscript = new JMenuItem("View Transcript");
    
    JMenu professor = new JMenu("Professor");
    JMenuItem findProfessor = new JMenuItem("Find Professor");
    JMenuItem teachingAssignments = new JMenuItem("Display Teaching Assignments");
    JMenuItem studentRoster = new JMenuItem("Display Student Roster");
    JMenuItem agreeToTeach = new JMenuItem("Agree to Teach a Course");
    
    file.add( login ); // add new frame item to File menu
    file.add( logoff );
    file.add(close);
    student.add(findStudent); // add new frame item to Student menu
    student.add(studentSchedule);
    student.add(addSection);
    student.add(dropSection);
    student.add(viewTranscript);
    professor.add(findProfessor); // add new frame item to Professor menu
    professor.add(teachingAssignments);
    professor.add(studentRoster);
    professor.add(agreeToTeach);
    bar.add(file); // add File menu to menu bar
    bar.add(student); // add student menu to menu bar
    bar.add(professor);// add Professor menu to menu bar
    setJMenuBar(bar); // set menu bar for this application
    theDesktop = new JDesktopPane(); // create desktop pane
    add( theDesktop ); // add desktop pane to frame    
    // set up listener for newFrame menu item
    ActionListener loginItemlistener = new LoginItemListner();
    login.addActionListener(loginItemlistener);
    ActionListener logoffItemlistener = new LogoffItemListner();
    logoff.addActionListener(logoffItemlistener);
    ActionListener closeItemListener = new CloseItemListener();
    close.addActionListener(closeItemListener);
    ActionListener findStudentItemlistener = new FindStudentItemListener();
    findStudent.addActionListener(findStudentItemlistener);
  }
  
  class LoginItemListner implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      JInternalFrame loginFrame = new LoginInternalFrame();
      loginFrame.pack(); // set internal frame to size of contents  
      theDesktop.add( loginFrame ); // attach internal frame
      loginFrame.setVisible( true ); // show internal frame
      loginFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      
    }
  }
  
  class LogoffItemListner implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      //Save all of the info, then log them off
      
      JInternalFrame loggedOff = new JInternalFrame(" ", true, true);
      JLabel label = new JLabel("You have been successfully Logged Off!");
      loggedOff.add(label);
      loggedOff.pack();
      theDesktop.add(loggedOff);
      loggedOff.setVisible(true);
      loggedOff.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
  }
  
  class CloseItemListener implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      dispose();
    }
  }
  
  class FindStudentItemListener implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      JInternalFrame findStudentFrame = new JInternalFrame("Find Student", true, true, true, true);
      findStudentFrame.setLayout(new GridLayout(6, 2, 0, 10));
      theDesktop.add(findStudentFrame);
      findStudentFrame.setVisible(true);
      JLabel ssn = new JLabel("Enter SSN: ");
      ssnText = new JTextField(11);
      JLabel name = new JLabel("Name: ");
      nameResult = new JTextArea();
      JLabel ssn2 = new JLabel("SSN: ");
      ssn2Result = new JTextArea();
      JLabel major = new JLabel("Major: ");
      majorResult = new JTextArea();
      JLabel degree = new JLabel("Degree: ");
      degreeResult = new JTextArea();
      searchButton = new JButton("Search");
      close = new JButton("Close");
      //ActionListener closeButtonItemlistener = new CloseButtonItemListener();
      //close.addActionListener(findStudentItemlistener);
      
      nameResult.setEditable(false);
      ssn2Result.setEditable(false);
      majorResult.setEditable(false);
      degreeResult.setEditable(false);
      
      findStudentFrame.add(ssn);
      findStudentFrame.add(ssnText);
      findStudentFrame.add(name);
      findStudentFrame.add(nameResult);
      findStudentFrame.add(ssn2);
      findStudentFrame.add(ssn2Result);
      findStudentFrame.add(major);
      findStudentFrame.add(majorResult);
      findStudentFrame.add(degree);
      findStudentFrame.add(degreeResult);
      findStudentFrame.add(searchButton);
      findStudentFrame.add(close);
      findStudentFrame.pack();
      findStudentFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      LoginHandler2 handler2 = new LoginHandler2();
      searchButton.addActionListener(handler2);
      close.addActionListener(handler2);
      
      
    }
    private class LoginHandler2 implements ActionListener 
  {
     public void actionPerformed( ActionEvent event )
     {
      if ( event.getSource() == searchButton ){
        userSsn = ssnText.getText();
        File studentFile = new File(userSsn +".dat");
        boolean checkFile = studentFile.isFile();
        if(checkFile)
        {
          Student student = SRSDataAccess.initializeStudent(userSsn);
          nameResult.setText(student.getName());
          System.out.println("The bitches name is: " + student.getName());
          ssn2Result.setText(student.getSsn());
          degreeResult.setText(student.getDegree());
          majorResult.setText(student.getMajor());
          
        }
        else
        {
         //code 
          System.out.println("YOU DONE FUCKED UP BITCH!!!");
          ssn2Result.setText("YOU DONE FUCKED UP BITCH!!!");
          degreeResult.setText("YOU DONE FUCKED UP BITCH!!!");
          majorResult.setText("YOU DONE FUCKED UP BITCH!!!");
          nameResult.setText("YOU DONE FUCKED UP BITCH!!!");
        }
      }
      else if(event.getSource() == close)
      {
        findStudentFrame.dispose();
      }
     }
    }
  }
  
  public static void main( String[] args )
  {
    MainFrame desktopFrame = new MainFrame();  
    desktopFrame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
    desktopFrame.setSize( 600, 480 ); // set frame size
    desktopFrame.setVisible( true ); // display frame
  }
}
