/**
 * This class builds a frame with a menu and drop down options to display all the information!
 */
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
import java.nio.*;
import java.io.*;

public class MainFrame extends JFrame
{
  private JDesktopPane theDesktop;
  private JPanel northPanel, southPanel, dropNorthPanel, dropSouthPanel;
  private JInternalFrame loginFrame, loggedOff, findStudentFrame, displaySchedule, addSection, dropSection, viewTranscript;
  private String userSsn;
  private JButton searchButton, close, addSectionButton, viewCatalogButton, closeSectionButton, dropSectionButton,
    dropCatalogButton,dropCloseButton;
  private JTextArea nameResult, ssn2Result, majorResult, degreeResult;
  private JTextField ssnText, addSectionText, resultsText, dropSectionText, dropResultsText;
  private Student student;
  private ScheduleOfClasses classes;
  public MainFrame() 
  {
    super( "Main Frame" );
    JMenuBar bar = new JMenuBar(); // create menu bar
    
    JMenu file = new JMenu( "File" );// create Add menu
    JMenuItem login = new JMenuItem( "Login" );
    JMenuItem logoff = new JMenuItem( "Logoff" );
    JMenuItem close = new JMenuItem( "Close" );
    
    JMenu student = new JMenu("Student");
    JMenuItem findStudent = new JMenuItem("Find Student");
    JMenuItem studentSchedule = new JMenuItem("Display Course Schedule");
    JMenuItem addSection = new JMenuItem("Add Section");
    JMenuItem dropSection = new JMenuItem("Drop Section");
    JMenuItem viewTranscript = new JMenuItem("View Transcript");
    
    JMenu professor = new JMenu("Professor");
    JMenuItem findProfessor = new JMenuItem("Find Professor");
    JMenuItem teachingAssignments = new JMenuItem("Display Teaching Assignments");
    JMenuItem studentRoster = new JMenuItem("Display Student Roster");
    JMenuItem agreeToTeach = new JMenuItem("Agree to Teach a Course");
    
    file.add( login ); // add new frame item to File menu
    file.add( logoff );
    file.add(close);
    student.add(findStudent); // add new frame item to Student menu
    student.add(studentSchedule);
    student.add(addSection);
    student.add(dropSection);
    student.add(viewTranscript);
    professor.add(findProfessor); // add new frame item to Professor menu
    professor.add(teachingAssignments);
    professor.add(studentRoster);
    professor.add(agreeToTeach);
    bar.add(file); // add File menu to menu bar
    bar.add(student); // add student menu to menu bar
    bar.add(professor);// add Professor menu to menu bar
    setJMenuBar(bar); // set menu bar for this application
    theDesktop = new JDesktopPane(); // create desktop pane
    add( theDesktop ); // add desktop pane to frame    
    // set up listener for newFrame menu item
    ActionListener loginItemlistener = new LoginItemListner();
    login.addActionListener(loginItemlistener);
    ActionListener logoffItemlistener = new LogoffItemListner();
    logoff.addActionListener(logoffItemlistener);
    ActionListener closeItemListener = new CloseItemListener();
    close.addActionListener(closeItemListener);
    ActionListener findStudentItemlistener = new FindStudentItemListener();
    findStudent.addActionListener(findStudentItemlistener);
    ActionListener displayCourseScheduleListener = new DisplayCourseScheduleListener();
    studentSchedule.addActionListener(displayCourseScheduleListener);
    ActionListener addSectionListener = new AddSectionListener();
    addSection.addActionListener(addSectionListener);
    ActionListener dropSectionListener = new DropSectionListener();
    dropSection.addActionListener(dropSectionListener);
    ActionListener viewTranscriptListener = new ViewTranscriptListener();
    viewTranscript.addActionListener(viewTranscriptListener);
    
    SRSDataAccess.initializeCourseCatalog();
    classes = SRSDataAccess.initializeScheduleOfClasses("Spring");
    
  }
  
  
  
  
  
  class LoginItemListner implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      JInternalFrame loginFrame = new LoginInternalFrame();
      loginFrame.pack(); // set internal frame to size of contents  
      theDesktop.add( loginFrame ); // attach internal frame
      loginFrame.setVisible( true ); // show internal frame
      loginFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      
    }
  }
  
  class LogoffItemListner implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      //Save all of the info, then log them off
      
      JInternalFrame loggedOff = new JInternalFrame(" ", true, true);
      JLabel label = new JLabel("You have been successfully Logged Off!");
      loggedOff.add(label);
      loggedOff.pack();
      theDesktop.add(loggedOff);
      loggedOff.setVisible(true);
      loggedOff.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
  }
  
  
  
  
  
  
  
  class CloseItemListener implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      dispose();
    }
  }
  
  class FindStudentItemListener implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      JInternalFrame findStudentFrame = new JInternalFrame("Find Student", true, true, true, true);
      findStudentFrame.setLayout(new GridLayout(6, 2, 0, 10));
      theDesktop.add(findStudentFrame);
      findStudentFrame.setVisible(true);
      JLabel ssn = new JLabel("Enter SSN: ");
      ssnText = new JTextField(11);
      JLabel name = new JLabel("Name: ");
      nameResult = new JTextArea();
      JLabel ssn2 = new JLabel("SSN: ");
      ssn2Result = new JTextArea();
      JLabel major = new JLabel("Major: ");
      majorResult = new JTextArea();
      JLabel degree = new JLabel("Degree: ");
      degreeResult = new JTextArea();
      searchButton = new JButton("Search");
      close = new JButton("Close");
      //ActionListener closeButtonItemlistener = new CloseButtonItemListener();
      //close.addActionListener(findStudentItemlistener);
      
      nameResult.setEditable(false);
      ssn2Result.setEditable(false);
      majorResult.setEditable(false);
      degreeResult.setEditable(false);
      
      findStudentFrame.add(ssn);
      findStudentFrame.add(ssnText);
      findStudentFrame.add(name);
      findStudentFrame.add(nameResult);
      findStudentFrame.add(ssn2);
      findStudentFrame.add(ssn2Result);
      findStudentFrame.add(major);
      findStudentFrame.add(majorResult);
      findStudentFrame.add(degree);
      findStudentFrame.add(degreeResult);
      findStudentFrame.add(searchButton);
      findStudentFrame.add(close);
      findStudentFrame.pack();
      findStudentFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      LoginHandler2 handler2 = new LoginHandler2();
      searchButton.addActionListener(handler2);
      close.addActionListener(handler2);
      
      
    }
    private class LoginHandler2 implements ActionListener 
    {
      public void actionPerformed( ActionEvent event )
      {
        if ( event.getSource() == searchButton ){
          userSsn = ssnText.getText();
          File studentFile = new File(userSsn +".dat");
          boolean checkFile = studentFile.isFile();
          if(checkFile)
          {
            student = SRSDataAccess.initializeStudent(userSsn);
            nameResult.setText(student.getName());
            //System.out.println("The student's name is: " + student.getName());
            ssn2Result.setText(student.getSsn());
            degreeResult.setText(student.getDegree());
            majorResult.setText(student.getMajor());
            
          }
          else
          {
            //code 
            //System.out.println("This would have worked if we had a tacher to help us");
            ssn2Result.setText("ERROR");
            degreeResult.setText("ERROR");
            majorResult.setText("ERROR");
            nameResult.setText("STUDENT NOT FOUND");
          }
        }
        else if(event.getSource() == close)
        {
          System.exit(0);
        }
      }
    }
  }
  
  
  
  
  
  
  
  
  
  class DisplayCourseScheduleListener implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      displaySchedule = new JInternalFrame("Schedule", true, true, true, true);
      displaySchedule.setLayout(new BorderLayout());
      theDesktop.add(displaySchedule);
      displaySchedule.setVisible(true);
      displaySchedule.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      
      JTextField scheduleField = new JTextField();
      
//      System.out.println(student.displayCourseSchedule());
      scheduleField.setText(student.displayCourseSchedule());
      scheduleField.setEditable(false);
      displaySchedule.add(scheduleField,BorderLayout.CENTER);
      scheduleField.setVisible(true);
      
      displaySchedule.pack();
      
    }
  }
  
  
  class AddSectionListener implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      
      
      addSection = new JInternalFrame("Add Section", true, true, true, true);
      addSection.setLayout(new BorderLayout());
      northPanel = new JPanel();
      
      addSectionText = new JTextField(11);
      theDesktop.add(addSection);
      addSectionButton = new JButton("Add Section");
      northPanel.add(addSectionText);
      northPanel.add(addSectionButton);
      addSection.add(northPanel, BorderLayout.NORTH);
      
      resultsText = new JTextField();
      resultsText.setEditable(false);
      addSection.add(resultsText, BorderLayout.CENTER);
      
      southPanel = new JPanel();
      
      viewCatalogButton = new JButton("View Catalog");
      southPanel.add(viewCatalogButton);
      
      closeSectionButton = new JButton("Close Section");
      southPanel.add(closeSectionButton);
      addSection.add(southPanel, BorderLayout.SOUTH);
      
      addSection.setVisible(true);
      addSection.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      addSection.pack();
      
      AddSectionListener2 addSectionListener2 = new AddSectionListener2();
      addSectionButton.addActionListener(addSectionListener2);
    }
  }
  
  class AddSectionListener2 implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      if(event.getSource()==addSectionButton)
      {
        String userSectionNo = addSectionText.getText();
        if(classes.findSection(userSectionNo)!=null)
        {
          Section s = classes.findSection(userSectionNo);
          student.addSection(s);
          resultsText.setText("The section has been added to the student's list of classes!");
        }
        else{
          resultsText.setText("This section was not found!");
        }
        
        
      }
    }
  }
  
  
  class DropSectionListener implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      dropSection = new JInternalFrame("Drop Section", true, true, true, true);
      dropSection.setLayout(new BorderLayout());
      dropNorthPanel = new JPanel();
      
      dropSectionText = new JTextField(11);
      theDesktop.add(dropSection);
      dropSectionButton = new JButton("Drop Section");
      dropNorthPanel.add(dropSectionText);
      dropNorthPanel.add(dropSectionButton);
      dropSection.add(dropNorthPanel, BorderLayout.NORTH);
      
      dropResultsText = new JTextField();
      dropSection.add(dropResultsText, BorderLayout.CENTER);
      
      dropSouthPanel = new JPanel();
      
      dropCatalogButton = new JButton("View Catalog");
      dropSouthPanel.add(dropCatalogButton);
      
      dropCloseButton = new JButton("Close Section");
      dropSouthPanel.add(dropCloseButton);
      dropSection.add(dropSouthPanel, BorderLayout.SOUTH);
      
      dropSection.setVisible(true);
      dropSection.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      dropSection.pack();
      
      DropSectionListener2 dropitlikeitshotSectionListener2 = new DropSectionListener2();
      dropSectionButton.addActionListener(dropitlikeitshotSectionListener2);
    }
  }
  
  
  class DropSectionListener2 implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      if(event.getSource()==dropSectionButton)
      {
        //System.out.println("++++++++++++++++++++++");
        String userSectionNo = dropSectionText.getText();
        Section s = classes.findSection(userSectionNo);
        if(student.isEnrolledIn(s))
        {
          System.out.println("++++++++++++++++++++++");
          
          student.dropSection(s);
          dropResultsText.setText("This section has been dropped like it is hot from the student's list of classes!");
        }
        else{
          dropResultsText.setText("The student is not enrolled in this class like he should have been");
        }
        
        
      }
    }
  }
  
  
  
  class ViewTranscriptListener implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      viewTranscript = new JInternalFrame("View Transcript",true,true,true,true);
      
      
    }
  }
  
  
  
  
  
  
  
  public static void main( String[] args )
  {
    MainFrame desktopFrame = new MainFrame();  
    desktopFrame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
    desktopFrame.setSize( 600, 480 ); // set frame size
    desktopFrame.setVisible( true ); // display frame
  }
}
