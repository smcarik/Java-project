/**
 * This class sets the course number, name, and number of credits, noting if the course needs prerequisites
 * and adds the section
 */
import java.util.*;
public class Course 
{
  private double credits;
  private String courseName;
  private String courseNo;
  ArrayList<Course> prerequisites;
  ArrayList<Section> offeredAsSection;
  public Course()
  {
    credits = 0.0;
    courseName = "UNASSIGNED";
    courseNo = "UNASSIGNED";
    prerequisites = new ArrayList<Course>();
    offeredAsSection = new ArrayList<Section>();
  }
  /**
   * This constructor initializes the course number, course name, and credits and creates two new Arraylists
   * @param courseNo number of the course
   * @param courseName name of the course
   * @param credits number of credits the class is good for
   */
  public Course(String courseNo, String courseName, double credits)
  {
    this.credits = credits;
    this.courseName= courseName;
    this.courseNo= courseNo;
    prerequisites = new ArrayList<Course>();
    offeredAsSection = new ArrayList<Section>();
  }
  /**
   * This method sets the course number 
   * @param courseNo enter the course number that you are setting
   */
  public void setCourseNo(String courseNo)
  {
    this.courseNo = courseNo;
  }
  
   /**
   * returns the course name
   * @return courseName
   */
  public String getCourseNo()
  {
    return courseNo;
  }
  /**
   * This method sets the course name
   * @param courseName enter the name of the course you are setting
   */
  public void setCourseName(String courseName)
  {
    this.courseName = courseName;
  }
  
  /**
   * returns the course name
   * @return courseName
   */
  public String getCourseName()
  {
    return courseName;
  }
  /**
   * This method sets the number of credits a class is worth
   * @param credits enter the number of credits the course is worth
   */
  public void setCredits(double credits)
  {
    this.credits = credits;
  }
  
  /**
   * returns the number of credits
   * @return credits
   */
  public double getCredits()
  {
    return credits;
  }
  
  /**
   * displays the course number, course name, the number of credits it is worth, and the prerequisites required
   * to take the class
   * @ return something
   */
    public void display()
  {
    System.out.println("Course number: " + courseNo + " Course name: " +
                       courseName + " Credits: " + credits + " PreReqs: " + prerequisites);
  }
  
  /**
   * returns the string form of all the info about the classes
   * @return something 
   */
  public String toString()
  {
    return "Course number: " + courseNo + " Course name: " + courseName + " Credits: " + credits;
  }
  
  /**
   * this method adds the prerequisites of the class, if there are any
   * @param prereq a prerequisite that msut be fulfilled to take a class
   */
  public void addPrerequisite(Course prereq)
  {
    prerequisites.add(prereq);
  }
  
  /**
   * returns true is the class has any prerequsites that need to be filled
   */
  public Boolean hasPrerequisites()
  {
    if (prerequisites.size() == 0)
    {
      return false;
    }
    else
    {
      return true;
    }
  }
  
  /**
   * gets the prerequsites required to enrol for the class
   * @return prerequisites
   */
  public ArrayList<Course> getPrerequisites()
  {
    return prerequisites;
  }
  
  /**
   * schedules the section by adding it to the schedule
   * @param day the days the section is offered
   * @param time the time the section is offered
   * @param room the room the section will be taught in
   * @param capacity the seating capacity of the section
   */
  public void scheduleSection(String day, String time, String room, int capacity)
  {
    Section section = new Section(offeredAsSection.size()+1, day, time, room, capacity);
    this.addSection(section);
  }
  /**
   * adds the section to the class schedule
   * @param section the section to be added to the ArrayList offeredAsSection
   */
 public void addSection(Section section)
  {
    offeredAsSection.add(section);
  }
} 
